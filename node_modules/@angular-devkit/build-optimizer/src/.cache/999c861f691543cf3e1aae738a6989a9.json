{"remainingRequest":"/Users/josephfan/Desktop/AngelHack-519-AWS-HackathonFirebase 2/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/josephfan/Desktop/AngelHack-519-AWS-HackathonFirebase 2/node_modules/angularfire2/database/list/create-reference.js","dependencies":[{"path":"/Users/josephfan/Desktop/AngelHack-519-AWS-HackathonFirebase 2/node_modules/angularfire2/database/list/create-reference.js","mtime":1526485025000},{"path":"/Users/josephfan/Desktop/AngelHack-519-AWS-HackathonFirebase 2/node_modules/cache-loader/dist/cjs.js","mtime":1526847069000},{"path":"/Users/josephfan/Desktop/AngelHack-519-AWS-HackathonFirebase 2/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { snapshotChanges } from './snapshot-changes';\nimport { stateChanges } from './state-changes';\nimport { auditTrail } from './audit-trail';\nimport { createDataOperationMethod } from './data-operation';\nimport { createRemoveMethod } from './remove';\nimport { map } from 'rxjs/operators';\nexport function createListReference(query, afDatabase) {\n    return {\n        query: query,\n        update: createDataOperationMethod(query.ref, 'update'),\n        set: createDataOperationMethod(query.ref, 'set'),\n        push: function (data) { return query.ref.push(data); },\n        remove: createRemoveMethod(query.ref),\n        snapshotChanges: function (events) {\n            var snapshotChanges$ = snapshotChanges(query, events);\n            return afDatabase.scheduler.keepUnstableUntilFirst(afDatabase.scheduler.runOutsideAngular(snapshotChanges$));\n        },\n        stateChanges: function (events) {\n            var stateChanges$ = stateChanges(query, events);\n            return afDatabase.scheduler.keepUnstableUntilFirst(afDatabase.scheduler.runOutsideAngular(stateChanges$));\n        },\n        auditTrail: function (events) {\n            var auditTrail$ = auditTrail(query, events);\n            return afDatabase.scheduler.keepUnstableUntilFirst(afDatabase.scheduler.runOutsideAngular(auditTrail$));\n        },\n        valueChanges: function (events) {\n            var snapshotChanges$ = snapshotChanges(query, events);\n            return afDatabase.scheduler.keepUnstableUntilFirst(afDatabase.scheduler.runOutsideAngular(snapshotChanges$)).pipe(map(function (actions) { return actions.map(function (a) { return a.payload.val(); }); }));\n        }\n    };\n}\n//# sourceMappingURL=create-reference.js.map",null]}